# Chunk 1
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE,
comment="", digits = 3, tidy = FALSE, prompt = FALSE, fig.align = 'center')
# Chunk 2: tsibble-setup
library(tidyverse)
library(tsibble)
library(lubridate)
weather <- nycflights13::weather %>%
select(origin, time_hour, temp, humid, precip)
weather
# Chunk 3: tsibble-coerce
weather_tsbl <- as_tsibble(weather, index=time_hour, key=id(origin))
weather_tsbl
# Chunk 4: tsibble-data-manipulation
weather_tsbl %>%
group_by(origin) %>%
index_by(month = yearmonth(time_hour)) %>%
summarise(
temp_high = max(temp, na.rm = TRUE),
temp_average = mean(temp, na.rm = TRUE),
temp_low = min(temp, na.rm = TRUE)
) %>%
DT::datatable()
# Chunk 5: tsibble-data-irregular
flights <- nycflights13::flights %>%
mutate(sched_dep_datetime = make_datetime(year, month, day, hour, minute, tz = "America/New_York")) %>%
select(carrier, flight, year, month, day, hour, minute, sched_dep_datetime, dep_delay)
flights
# Chunk 6: tsibble-data-irregular-convert
flights_tsbl <- as_tsibble(flights, key=id(carrier, flight),
index=sched_dep_datetime,
regular = FALSE)
flights_tsbl
# Chunk 7: tsibble-data-irregular-convert-fix
flights_tsbl %>%
group_by(carrier, flight) %>%
index_by(month = yearmonth(sched_dep_datetime)) %>%
summarise(delay_mean = mean(dep_delay, na.rm=TRUE)) %>%
arrange(desc(delay_mean))
# Chunk 8: tsibble-na
pedestrian
has_gaps(pedestrian)
# Chunk 9: tsibble-na-count
pedestrian %>%
count_gaps(.fill=TRUE) %>%
arrange(desc(.n))
# Chunk 10: tsibble-na-scan
pedestrian %>%
filter(Sensor == "Bourke Street Mall (North)") %>%
scan_gaps()
# Chunk 11: tsibble-na-viz
pedestrian %>%
count_gaps(.fill=TRUE) %>%
ggplot(aes(x = Sensor, colour = Sensor)) +
geom_linerange(aes(ymin = .from, ymax = .to)) +
geom_point(aes(y = .from)) +
geom_point(aes(y = .to)) +
coord_flip() +
theme(legend.position = "top") +
labs(x="")
# Chunk 12: tsibble-na-fill
na_g <- pedestrian %>%
fill_gaps(.full=TRUE) %>%
ggplot(aes(x=Date_Time, y=Count, color=Sensor)) +
geom_line() +
facet_wrap(~Sensor) +
theme(legend.position = "none")
fill_g <- pedestrian %>%
fill_gaps(Count = mean(Count), .full=TRUE) %>%
ggplot(aes(x=Date_Time, y=Count, color=Sensor)) +
geom_line() +
facet_wrap(~Sensor) +
theme(legend.position = "none")
cowplot::plot_grid(na_g, fill_g)
# Chunk 13: tsibble-pedestrian
pedestrian_tsbl <- pedestrian %>%
fill_gaps(.full = TRUE)
pedestrian_tsbl
# Chunk 14: tsibble-pedestrian-ma
pedestrian_tsbl %>%
group_by(Sensor) %>%
mutate(Daily_MA = slide_dbl(Count, mean, na.rm = TRUE, .size = 3, .align = "center"
))
# Chunk 15: tsibble-pedestrian-map
pedestrian_mth_tsbl <- pedestrian_tsbl %>%
mutate(YrMth = yearmonth(Date_Time)) %>%
nest(-Sensor, -YrMth)
pedestrian_mth_tsbl
# Chunk 16: tsibble-pedestrian-map-combine
pedestrian_mth_tsbl %>%
group_by(Sensor) %>%
mutate(Monthly_MA = slide_dbl(data,
~ mean(.$Count, na.rm = TRUE), .size = 3, .align = "center", .bind = TRUE
))
# Chunk 17: tsibble-pedestrian-map-lm
fit_reg <- function(...) {
data <- tibble(...)
fit <- lm(Count ~ Time, data = data)
list(fitted = fitted(fit), resid = residuals(fit))
}
pedestrian_reg_tsbl <- pedestrian %>%
filter_index(~ "2015-03") %>%
nest(-Sensor) %>%
mutate(diag = purrr::map(data, ~ pslide_dfr(., fit_reg, .size = 24 * 7)))
pedestrian_reg_tsbl$diag
pedestrian_reg_tsbl <- pedestrian %>%
filter_index(~ "2015-03") %>%
nest(-Sensor) %>%
mutate(reg = purrr::map(data, ~ pslide_dfr(., fit_reg, .size = 24 * 7)))
pedestrian_reg_tsbl$reg[[1]]
pedestrian_reg_tsbl
setwd("D:/docs/viz")
library(tidyverse)
library(extrafont)
loadfonts()
Orange %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "Days old", y = "Circumference (mm)",
caption = "@drsimonj 원작")
orange_ends <- Orange %>%
group_by(Tree) %>%
top_n(1, age) %>%
pull(circumference)
Orange %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "Days old", y = "Circumference (mm)",
caption = "@drsimonj 원작")
Orange %>%
mutate(Tree = fct_rev(Tree)) %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0), label=scales::comma) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "일별 성장", y = "직경 (mm)",
caption = "@drsimonj 원작")
Orange %>%
mutate(Tree = factor(Tree, levels=c(3,1,5,2,4))) %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0), label=scales::comma) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "일별 성장", y = "직경 (mm)",
caption = "@drsimonj 원작")
Orange %>%
mutate(Tree = factor(Tree, levels=c(4,2,5,1,3))) %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0), label=scales::comma) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "일별 성장", y = "직경 (mm)",
caption = "@drsimonj 원작")
Orange %>%
mutate(Tree = factor(Tree, levels=c(4,2,5,1,3))) %>%
ggplot(aes(age, circumference, color = Tree)) +
geom_line(size = 2, alpha = .8) +
theme_minimal(base_family = "NanumGothic") +
scale_x_continuous(expand = c(0, 0), label=scales::comma) +
scale_y_continuous(sec.axis = sec_axis(~ ., breaks = orange_ends)) +
labs(title = "오렌지 나무 성장곡선",
subtitle = "R 내장된 Orange 데이터셋",
x = "일별 경과 시간", y = "직경 (mm)",
caption = "@drsimonj 원작")
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
library(forcats)
library(lubridate)
library(mgcv)
library(tidyr)
library(purrr)
library(broom)
library(emmeans)
library(ungeviz)
library(ggridges)
library(tidybayes)
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
install.packages("emmeans")
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
library(forcats)
library(lubridate)
library(mgcv)
library(tidyr)
library(purrr)
library(broom)
library(emmeans)
library(ungeviz)
library(ggridges)
library(tidybayes)
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
emmeans
# color for individual small data points
point_color <- darken("#009E73", .3)
cacao %>%
filter(location == "Canada") -> cacao_single
fit <- lm(rating ~ 1, data = cacao_single)
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
library(forcats)
library(lubridate)
library(mgcv)
library(tidyr)
library(purrr)
library(broom)
library(emmeans)
library(ungeviz)
library(ggridges)
library(tidybayes)
# color for individual small data points
point_color <- darken("#009E73", .3)
cacao %>%
filter(location == "Canada") -> cacao_single
fit <- lm(rating ~ 1, data = cacao_single)
CI_df <- data.frame(type = c(0.8, 0.95, 0.99)) %>%
mutate(df = map(type, ~tidy(emmeans(fit, ~ 1, options = list(level = .x))))) %>%
unnest() %>%
select(type, estimate, std.error, conf.low, conf.high) %>%
mutate(type = paste0(signif(100*type, 2), "% confidence interval"))
cacao_single
cacao
install.packages("tidybayes")
library(forcats)
library(lubridate)
library(mgcv)
library(tidyr)
library(purrr)
library(broom)
library(emmeans)
library(ungeviz)
install.packages("ungeviz")
library(forcats)
library(lubridate)
library(mgcv)
library(tidyr)
library(purrr)
library(broom)
library(emmeans)
library(ungeviz)
library(ggridges)
library(tidybayes)
animate <- TRUE # should animated figures be included or not
devtools::install_github("wilkelab/ungeviz")
g <- expand.grid(x = 1:10, y = 1:10)
set.seed(84524)
data <- data.frame(ratio = c(0.01, 0.1, 0.4)) %>%
mutate(
out = purrr::map(
ratio,
~g %>% mutate(
value = {
n <- n()
i <- round(n*.x)
sample(c(rep("S", i), rep("F", n - i)), n)
}
)
)
) %>%
unnest() %>%
mutate(
label = paste0(round(100*ratio), "% chance")
)
ggplot(data, aes(x, y, fill = value)) +
geom_tile(color = "white", size = 1) +
coord_fixed(expand = FALSE, clip = "off") +
scale_x_continuous(name = NULL, breaks = NULL) +
scale_y_continuous(name = NULL, breaks = NULL) +
scale_fill_manual(
name = NULL,
breaks = c("S", "F"),
labels = c("success   ", "failure"),
values = c(
"S" = desaturate(darken("#0072B2", .4), .5),
"F" = desaturate(lighten("#0072B2", .7), .5)
),
guide = guide_legend(override.aes = list(size = 0))
) +
facet_wrap(~label) +
theme_dviz_grid() +
theme(
panel.spacing = unit(12, "pt"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.justification = "right",
legend.box.spacing = unit(6, "pt"),
legend.spacing.x = unit(3, "pt"),
legend.key.size = unit(10, "pt")
)
devtools::install_github("wilkelab/ungeviz")
devtools::install_github("wilkelab/ungeviz")
library(ungeviz)
install.packages("mvtnorm")
devtools::install_github("wilkelab/ungeviz")
ggplot(data, aes(x, y, fill = value)) +
geom_tile(color = "white", size = 1) +
coord_fixed(expand = FALSE, clip = "off") +
scale_x_continuous(name = NULL, breaks = NULL) +
scale_y_continuous(name = NULL, breaks = NULL) +
scale_fill_manual(
name = NULL,
breaks = c("S", "F"),
labels = c("success   ", "failure"),
values = c(
"S" = desaturate(darken("#0072B2", .4), .5),
"F" = desaturate(lighten("#0072B2", .7), .5)
),
guide = guide_legend(override.aes = list(size = 0))
) +
facet_wrap(~label) +
theme_dviz_grid() +
theme(
panel.spacing = unit(12, "pt"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.justification = "right",
legend.box.spacing = unit(6, "pt"),
legend.spacing.x = unit(3, "pt"),
legend.key.size = unit(10, "pt")
)
ggplot(data, aes(x, y, fill = value)) +
geom_tile(color = "white", size = 1) +
coord_fixed(expand = FALSE, clip = "off") +
scale_x_continuous(name = NULL, breaks = NULL) +
scale_y_continuous(name = NULL, breaks = NULL) +
scale_fill_manual(
name = NULL,
breaks = c("S", "F"),
labels = c("success   ", "failure"),
# values = c(
#   "S" = desaturate(darken("#0072B2", .4), .5),
#   "F" = desaturate(lighten("#0072B2", .7), .5)
# ),
guide = guide_legend(override.aes = list(size = 0))
) +
facet_wrap(~label) +
theme_dviz_grid() +
theme(
panel.spacing = unit(12, "pt"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.justification = "right",
legend.box.spacing = unit(6, "pt"),
legend.spacing.x = unit(3, "pt"),
legend.key.size = unit(10, "pt")
)
ggplot(data, aes(x, y, fill = value)) +
geom_tile(color = "white", size = 1) +
coord_fixed(expand = FALSE, clip = "off") +
scale_x_continuous(name = NULL, breaks = NULL) +
scale_y_continuous(name = NULL, breaks = NULL) +
scale_fill_manual(
name = NULL,
breaks = c("S", "F"),
labels = c("success   ", "failure"),
# values = c(
#   "S" = desaturate(darken("#0072B2", .4), .5),
#   "F" = desaturate(lighten("#0072B2", .7), .5)
# ),
guide = guide_legend(override.aes = list(size = 0))
) +
facet_wrap(~label) +
# theme_dviz_grid() +
theme(
panel.spacing = unit(12, "pt"),
legend.position = "bottom",
legend.direction = "horizontal",
legend.justification = "right",
legend.box.spacing = unit(6, "pt"),
legend.spacing.x = unit(3, "pt"),
legend.key.size = unit(10, "pt")
)
x <- c(seq(-2.5, 0, length.out = 50), seq(0.00001, 5, length.out = 100))
mu <- 1.02
sd <- .9
df_norm <- data.frame(
x,
y = dnorm(x, mu, sd),
type = ifelse(x <= 0, "A", "B")
)
ci_x <- c(qnorm(.025, mu, sd), qnorm(0.975, mu, sd))
ci_y <- dnorm(ci_x, mu, sd)
df_annot <- data.frame(
x = c(mu + 0.05, mu + 0.1, mu + 2.3*sd, mu - 2.5*sd),
y = c(dnorm(mu, mu, sd) + 0.04, ci_y[1] + 0.01, 3*ci_y[1], 3*ci_y[1]),
hjust = c(0, 0, 0.5, 0.5),
vjust = c(1, 0, 0.5, 0.5),
label = c("best estimate", "margin of error", "blue wins", "yellow wins")
)
ggplot(df_norm, aes(x, y)) +
geom_area(aes(fill = type)) +
geom_vline(xintercept = 0, linetype = 2, color = "gray50") +
geom_line() +
geom_segment(
data = data.frame(x = 1),
x = ci_x[1], xend = ci_x[2], y = ci_y[1], yend = ci_y[2],
arrow = arrow(angle = 15, length = grid::unit(9, "pt"), ends = "both", type = "closed"),
inherit.aes = FALSE
) +
geom_segment(
data = data.frame(x = 1),
x = mu, xend = mu, y = 0, yend = dnorm(mu, mu, sd) + 0.04,
inherit.aes = FALSE
) +
geom_text(
data = df_annot,
aes(x, y, label = label, hjust = hjust, vjust = vjust),
family = dviz_font_family,
size = 12/.pt
) +
scale_x_continuous(
name = "percentage point advantage for blue",
labels = scales::percent_format(accuracy = 0.1, scale = 1)
) +
scale_y_continuous(
name = NULL,
breaks = NULL,
expand = c(0, 0),
limits = c(0, dnorm(mu, mu, sd) + 0.045)
) +
scale_fill_manual(
values = c(A = "#f8f1a9", B = "#b1daf4"),
guide = "none"
) +
theme_dviz_open()
